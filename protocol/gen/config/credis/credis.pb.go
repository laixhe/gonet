// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: config/credis/credis.proto

package credis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Redis配置
type Redis struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 连接地址
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty" mapstructure:"addr" toml:"addr" yaml:"addr"` // @gotags: mapstructure:"addr" toml:"addr" yaml:"addr"
	// 选择N号数据库
	DbNum int32 `protobuf:"varint,2,opt,name=db_num,json=dbNum,proto3" json:"db_num,omitempty" mapstructure:"db_num" toml:"db_num" yaml:"db_num"` // @gotags: mapstructure:"db_num" toml:"db_num" yaml:"db_num"
	// 设置打开数据库连接的最大数量
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" mapstructure:"password" toml:"password" yaml:"password"` // @gotags: mapstructure:"password" toml:"password" yaml:"password"
	// 最大链接数
	PoolSize int32 `protobuf:"varint,4,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty" mapstructure:"pool_size" toml:"pool_size" yaml:"pool_size"` // @gotags: mapstructure:"pool_size" toml:"pool_size" yaml:"pool_size"
	// 空闲链接数
	MinIdleConn   int32 `protobuf:"varint,5,opt,name=min_idle_conn,json=minIdleConn,proto3" json:"min_idle_conn,omitempty" mapstructure:"min_idle_conn" toml:"min_idle_conn" yaml:"min_idle_conn"` // @gotags: mapstructure:"min_idle_conn" toml:"min_idle_conn" yaml:"min_idle_conn"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redis) Reset() {
	*x = Redis{}
	mi := &file_config_credis_credis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_credis_credis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_credis_credis_proto_rawDescGZIP(), []int{0}
}

func (x *Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Redis) GetDbNum() int32 {
	if x != nil {
		return x.DbNum
	}
	return 0
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Redis) GetMinIdleConn() int32 {
	if x != nil {
		return x.MinIdleConn
	}
	return 0
}

var File_config_credis_credis_proto protoreflect.FileDescriptor

const file_config_credis_credis_proto_rawDesc = "" +
	"\n" +
	"\x1aconfig/credis/credis.proto\x12\x06credis\"\x8f\x01\n" +
	"\x05Redis\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x15\n" +
	"\x06db_num\x18\x02 \x01(\x05R\x05dbNum\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x1b\n" +
	"\tpool_size\x18\x04 \x01(\x05R\bpoolSize\x12\"\n" +
	"\rmin_idle_conn\x18\x05 \x01(\x05R\vminIdleConnB;Z9github.com/laixhe/gonet/protocol/gen/config/credis;credisb\x06proto3"

var (
	file_config_credis_credis_proto_rawDescOnce sync.Once
	file_config_credis_credis_proto_rawDescData []byte
)

func file_config_credis_credis_proto_rawDescGZIP() []byte {
	file_config_credis_credis_proto_rawDescOnce.Do(func() {
		file_config_credis_credis_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_credis_credis_proto_rawDesc), len(file_config_credis_credis_proto_rawDesc)))
	})
	return file_config_credis_credis_proto_rawDescData
}

var file_config_credis_credis_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_config_credis_credis_proto_goTypes = []any{
	(*Redis)(nil), // 0: credis.Redis
}
var file_config_credis_credis_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_config_credis_credis_proto_init() }
func file_config_credis_credis_proto_init() {
	if File_config_credis_credis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_credis_credis_proto_rawDesc), len(file_config_credis_credis_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_credis_credis_proto_goTypes,
		DependencyIndexes: file_config_credis_credis_proto_depIdxs,
		MessageInfos:      file_config_credis_credis_proto_msgTypes,
	}.Build()
	File_config_credis_credis_proto = out.File
	file_config_credis_credis_proto_goTypes = nil
	file_config_credis_credis_proto_depIdxs = nil
}
