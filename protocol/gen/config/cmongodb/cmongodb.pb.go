// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: config/cmongodb/cmongodb.proto

package cmongodb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MongoDB数据库配置
type MongoDB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 连接地址
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty" mapstructure:"uri" toml:"uri" yaml:"uri"` // @gotags: mapstructure:"uri" toml:"uri" yaml:"uri"
	// 指定数据库
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty" mapstructure:"database" toml:"database" yaml:"database"` // @gotags: mapstructure:"database" toml:"database" yaml:"database"
	// 最大连接的数量
	MaxPoolSize uint64 `protobuf:"varint,3,opt,name=max_pool_size,json=maxPoolSize,proto3" json:"max_pool_size,omitempty" mapstructure:"max_pool_size" toml:"max_pool_size" yaml:"max_pool_size"` // @gotags: mapstructure:"max_pool_size" toml:"max_pool_size" yaml:"max_pool_size"
	// 最小连接的数量
	MinPoolSize uint64 `protobuf:"varint,4,opt,name=min_pool_size,json=minPoolSize,proto3" json:"min_pool_size,omitempty" mapstructure:"min_pool_size" toml:"min_pool_size" yaml:"min_pool_size"` // @gotags: mapstructure:"min_pool_size" toml:"min_pool_size" yaml:"min_pool_size"
	// 最大连接的空闲时间(设置了连接可复用的最大时间)(单位秒)
	MaxConnIdleTime int64 `protobuf:"varint,5,opt,name=max_conn_idle_time,json=maxConnIdleTime,proto3" json:"max_conn_idle_time,omitempty" mapstructure:"max_conn_idle_time" toml:"max_conn_idle_time" yaml:"max_conn_idle_time"` // @gotags: mapstructure:"max_conn_idle_time" toml:"max_conn_idle_time" yaml:"max_conn_idle_time"
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MongoDB) Reset() {
	*x = MongoDB{}
	mi := &file_config_cmongodb_cmongodb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDB) ProtoMessage() {}

func (x *MongoDB) ProtoReflect() protoreflect.Message {
	mi := &file_config_cmongodb_cmongodb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDB.ProtoReflect.Descriptor instead.
func (*MongoDB) Descriptor() ([]byte, []int) {
	return file_config_cmongodb_cmongodb_proto_rawDescGZIP(), []int{0}
}

func (x *MongoDB) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MongoDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MongoDB) GetMaxPoolSize() uint64 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *MongoDB) GetMinPoolSize() uint64 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *MongoDB) GetMaxConnIdleTime() int64 {
	if x != nil {
		return x.MaxConnIdleTime
	}
	return 0
}

var File_config_cmongodb_cmongodb_proto protoreflect.FileDescriptor

const file_config_cmongodb_cmongodb_proto_rawDesc = "" +
	"\n" +
	"\x1econfig/cmongodb/cmongodb.proto\x12\bcmongodb\"\xac\x01\n" +
	"\aMongoDB\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\"\n" +
	"\rmax_pool_size\x18\x03 \x01(\x04R\vmaxPoolSize\x12\"\n" +
	"\rmin_pool_size\x18\x04 \x01(\x04R\vminPoolSize\x12+\n" +
	"\x12max_conn_idle_time\x18\x05 \x01(\x03R\x0fmaxConnIdleTimeB?Z=github.com/laixhe/gonet/protocol/gen/config/cmongodb;cmongodbb\x06proto3"

var (
	file_config_cmongodb_cmongodb_proto_rawDescOnce sync.Once
	file_config_cmongodb_cmongodb_proto_rawDescData []byte
)

func file_config_cmongodb_cmongodb_proto_rawDescGZIP() []byte {
	file_config_cmongodb_cmongodb_proto_rawDescOnce.Do(func() {
		file_config_cmongodb_cmongodb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_cmongodb_cmongodb_proto_rawDesc), len(file_config_cmongodb_cmongodb_proto_rawDesc)))
	})
	return file_config_cmongodb_cmongodb_proto_rawDescData
}

var file_config_cmongodb_cmongodb_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_config_cmongodb_cmongodb_proto_goTypes = []any{
	(*MongoDB)(nil), // 0: cmongodb.MongoDB
}
var file_config_cmongodb_cmongodb_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_config_cmongodb_cmongodb_proto_init() }
func file_config_cmongodb_cmongodb_proto_init() {
	if File_config_cmongodb_cmongodb_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_cmongodb_cmongodb_proto_rawDesc), len(file_config_cmongodb_cmongodb_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_cmongodb_cmongodb_proto_goTypes,
		DependencyIndexes: file_config_cmongodb_cmongodb_proto_depIdxs,
		MessageInfos:      file_config_cmongodb_cmongodb_proto_msgTypes,
	}.Build()
	File_config_cmongodb_cmongodb_proto = out.File
	file_config_cmongodb_cmongodb_proto_goTypes = nil
	file_config_cmongodb_cmongodb_proto_depIdxs = nil
}
